{"name":"Drax","tagline":"An embeddable distributed k/v store for Go","body":"# Drax\r\nAn embeddable distributed k/v store for Go\r\n[![Build Status](https://travis-ci.org/cpuguy83/drax.svg?branch=master)](https://travis-ci.org/cpuguy83/drax)\r\n\r\nDrax is a distributed k/v store based on raft (specifically https://github.com/hashicorp/raft)\r\nThe intent is to be relatively light-weight and embeddable, while implementing the API from https://github.com/docker/libkv\r\n\r\nDrax is NOT intended for production use. Use at your own risk.\r\nThis should be considered ALPHA quality.\r\n\r\nBoltdb is used to persist raft logs (and as such the K/V data)\r\n\r\n### Usage\r\nFor running the server, see `cmd/kv.go` as an example to get going.\r\n\r\n**Server Side**\r\n```go\r\n  // on node 1\r\n  listener, _ := net.Listen(\"tcp\", \"10.0.0.1:2380\")\r\n  peerAddr := \"\"\r\n  dialerFn := func(addr string, timeout time.Duration) (net.Conn, error) {\r\n    return net.DialTimeout(\"tcp\", addr, timeout)\r\n  }\r\n  cluster, _ := drax.New(listener, dialerFn, \"/var/lib/drax\", listener.Addr().String(), peerAddr)\r\n\r\n\r\n  // on node 2\r\n  listener, _ := net.Listen(\"tcp\", \"10.0.0.2:2380\")\r\n  peerAddr := \"10.0.0.1:2380\"\r\n  dialerFn := func(addr string, timeout time.Duration) (net.Conn, error) {\r\n    return net.DialTimeout(\"tcp\", addr, timeout)\r\n  }\r\n  cluster, _ := drax.New(listener, dialerFn, \"/var/lib/drax\", listener.Addr().String(), peerAddr)\r\n```\r\n\r\nA node that does not specify a peer, and that does not already contain a peer in it's peer store\r\nwill be setup in single node mode and made the leader. Once it is the leader it will exit single-node mode.\r\n\r\nYou can join a cluster by specifying **any** active peer's address, it does not need to be the leader.\r\n\r\n**Client side**\r\n\r\n```go\r\n  dialerFn := func(addr string, timeout time.Duration) (net.Conn, error) {\r\n    return net.DialTimeout(\"tcp\", addr, timeout)\r\n  }\r\n  retryTimeout := 10*time.Second\r\n  client := client.New(\"10.0.0.1:2380\", retryTimeout, dailerFn)\r\n  kvPair, err := client.Get(\"/foo\")\r\n```\r\n\r\nRequests to the K/V store can be sent to any peer and it will be forwarded to the leader.\r\nThis implements libkv's `Store` interface.\r\n\r\nYou can also communicate with the k/v store directly from the cluster:\r\n\r\n```go\r\n  kvPair, err := cluster.KVStore().Get(\"/foo\")\r\n```\r\n\r\nThis also implements libkv's `Store` interface.\r\n\r\n###TODO:\r\n- Add (more) tests\r\n- Improve RPC semantics\r\n- Look at using something other than JSON for encoding/decoding K/V messages, and RPC messages\r\n- Implement cluster management, adding/removing nodes to the store cluster as needed\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}